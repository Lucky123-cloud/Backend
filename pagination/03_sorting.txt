
https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/#pagination


# **API Sorting: Best Practices for Design & Implementation**

Here's a comprehensive guide to implementing robust sorting in your API, covering both simple and complex cases while maintaining performance and usability.

## **1. Recommended Sorting Syntax**
For clean, unambiguous API design, use this format:

```
GET /users?sort=field1.asc,field2.desc
```

### **Why This Format Wins**
✅ **Pairs fields with directions** (avoids ambiguity)  
✅ **Easy to parse** (split on commas, then on dots)  
✅ **Extensible** for multi-column sorting  
✅ **Human-readable** in URLs and logs  

## **2. Backend Implementation (Node.js Example)**
```javascript
// Parse ?sort=email.asc,created_at.desc
function parseSort(sortQuery) {
  if (!sortQuery) return [];
  
  return sortQuery.split(',').map(part => {
    const [field, direction] = part.split('.');
    return { field, direction: direction.toLowerCase() };
  });
}

// Convert to SQL ORDER BY clause
function buildOrderBy(sortParams) {
  if (!sortParams.length) return 'ORDER BY id ASC'; // Default
  
  return 'ORDER BY ' + sortParams.map(({ field, direction }) => {
    return `${field} ${direction.toUpperCase()}`;
  }).join(', ');
}

// Usage in Express
app.get('/users', (req, res) => {
  const sortParams = parseSort(req.query.sort);
  const orderBy = buildOrderBy(sortParams);
  
  const query = `SELECT * FROM users ${orderBy} LIMIT 100`;
  // Execute query...
});
```

## **3. Handling Edge Cases**
### **Default Sort Order**
When no sort is specified:
```sql
ORDER BY id ASC  -- Always include a deterministic sort
```

### **Validation**
- **Whitelist sortable fields** (prevent SQL injection):
  ```javascript
  const ALLOWED_SORT_FIELDS = ['email', 'created_at', 'name'];
  
  function validateSortFields(sortParams) {
    return sortParams.every(param => 
      ALLOWED_SORT_FIELDS.includes(param.field)
    );
  }
  ```

### **Case Sensitivity**
For case-insensitive sorting:
```sql
ORDER BY LOWER(email) ASC
```

## **4. Combining with Pagination**
For seek pagination with sorting:
```sql
-- First page
SELECT * FROM users 
ORDER BY email ASC, id ASC  -- id as tiebreaker
LIMIT 10;

-- Next page (using last values)
SELECT * FROM users 
WHERE (email, id) > ('last@example.com', 123)
ORDER BY email ASC, id ASC
LIMIT 10;
```

## **5. Cache Considerations**
For caching sorted responses:
- **Include sort params in cache key**:  
  `cache_key = "users:sort=email.asc,created_at.desc:page=2"`
- **Normalize sort strings** (avoid cache fragmentation):
  ```javascript
  function normalizeSort(sortQuery) {
    return sortQuery.toLowerCase().replace(/\s/g, '');
  }
  ```

## **6. Alternative Syntax Comparison**
| Format | Pros | Cons |
|--------|------|------|
| `sort=field.asc` | ✅ Clean, explicit | Requires parsing |
| `sort=+field` | ✅ Compact | ❌ Less readable |
| Separate `sort_by`/`order` | ❌ Ambiguous for multi-sort | ❌ Poor extensibility |

## **7. Frontend Implementation**
```javascript
// Building sort URLs
function buildSortUrl(field, currentSort) {
  // Toggle direction if same field
  const [currentField, currentDir] = currentSort?.split('.') || [];
  const newDir = (field === currentField && currentDir === 'asc') ? 'desc' : 'asc';
  
  return `/users?sort=${field}.${newDir}`;
}

// Usage in React
<button onClick={() => {
  navigate(buildSortUrl('email', router.query.sort));
}}>
  Sort Email {currentSort === 'email.asc' ? '↑' : '↓'}
</button>
```

## **Key Takeaways**
1. **Always pair fields with directions** (`field.asc` not `sort=field&order=asc`)
2. **Include a tiebreaker column** (usually `id`) for deterministic ordering
3. **Whitelist sortable fields** for security
4. **Combine carefully with pagination** (seek method works best)
5. **Document your sorting syntax** in API docs

This approach gives you a flexible, performant sorting system that works well for both simple and complex applications. Would you like me to adapt this for any specific framework or database?